// AuthorBooksTable.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { View } from "ts-sql-query/View";
import type { DBConnection } from "../helpers/connection-source";
import {
    Genre,
} from "../helpers/types"

export class AuthorBooksTable extends View<DBConnection, 'AuthorBooksTable'> {
    id = this.optionalColumn('id', 'uuid');
    name = this.optionalColumn('name', 'string');
    authorId = this.optionalColumn('author_id', 'int');
    releasedAt = this.optionalColumn('released_at', 'localDate');
    timeToRead = this.optionalColumn('time_to_read', 'int');
    genre = this.optionalColumn<Genre>('genre', 'enum', 'genre');
    weightGrams = this.optionalColumn('weight_grams', 'double');
    authorName = this.optionalColumn('author_name', 'string');

    constructor() {
        super('author_books')
    }
}




// AuthorsTable.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { Table } from "ts-sql-query/Table";
import type { DBConnection } from "../helpers/connection-source";
import {
    extractColumnsFrom,
} from "ts-sql-query/extras/utils"

export class AuthorsTable extends Table<DBConnection, 'AuthorsTable'> {
    id = this.primaryKey('id', 'int');
    name = this.optionalColumn('name', 'string');
    dob = this.optionalColumn('dob', 'localDate');
    createdAt = this.columnWithDefaultValue('created_at', 'localDateTime');
    updatedAt = this.columnWithDefaultValue('updated_at', 'localDateTime');

    constructor() {
        super('authors')
    }
}


export type AuthorsTablePk = SelectedValues<AuthorsTable>["id"]

export class AuthorsCrudRepo {
    constructor(
        public getConnection: () => DBConnection,
        public table: AuthorsTable,
    ) {}

    tableCols = extractColumnsFrom(this.table)

    findOneById(id: AuthorsTablePk, conn = this.getConnection()) {
        return conn.selectFrom(this.table)
            .where(this.table.id.equals(id))
            .select(this.tableCols)
            .executeSelectNoneOrOne();
    }
    findManyById(idList: AuthorsTablePk[], conn = this.getConnection()) {
        return conn.selectFrom(this.table)
            .where(this.table.id.in(idList))
            .select(this.tableCols)
            .executeSeletMany();
    }
    insertOne(row: InsertableRow<AuthorsTable>, conn = this.getConnection()) {
        return conn.insertInto(this.table)
            .set(row)
            .returning(this.tableCols)
            .executeInsertOne();
    }
    insertMany(rows: InsertableRow<AuthorsTable>[], conn = this.getConnection()) {
        return conn.insertInto(this.table)
            .values(rows)
            .returning(this.tableCols)
            .executeInsertMany();
    }
    updateOneById(id: AuthorsTablePk, update: UpdatableRow<AuthorsTable>, conn = this.getConnection()) {
        return conn.update(this.table)
            .set(update)
            .where(this.table.id.equals(id))
            .returning(this.tableCols)
            .executeUpdateOne();
    }
    updateManyById(idList: AuthorsTablePk[], update: UpdatableRow<AuthorsTable>, conn = this.getConnection()) {
        return conn.update(this.table)
            .set(update)
            .where(this.table.id.in(idList))
            .returning(this.tableCols)
            .executeUpdateMany();
    }
    deleteOneById(id: AuthorsTablePk, conn = this.getConnection()) {
        return conn.deleteFrom(this.table)
            .where(this.table.id.equals(id))
            .returning(this.tableCols)
            .executeDeleteOne();
    }
    deleteManyById(idList: AuthorsTablePk[], conn = this.getConnection()) {
        return conn.deleteFrom(this.table)
            .where(this.table.id.in(idList))
            .returning(this.tableCols)
            .executeDeleteMany();
    }
}


// BooksTable.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { Table } from "ts-sql-query/Table";
import type { DBConnection } from "../helpers/connection-source";
import {
    extractColumnsFrom,
} from "ts-sql-query/extras/utils"
import {
    Genre,
} from "../helpers/types"

export class BooksTable extends Table<DBConnection, 'BooksTable'> {
    id = this.autogeneratedPrimaryKey('id', 'uuid');
    name = this.column('name', 'string');
    authorId = this.column('author_id', 'int');
    releasedAt = this.optionalColumn('released_at', 'localDate');
    timeToRead = this.optionalColumn('time_to_read', 'int');
    genre = this.optionalColumn<Genre>('genre', 'enum', 'genre');
    weightGrams = this.optionalColumn('weight_grams', 'double');

    constructor() {
        super('books')
    }
}


export type BooksTablePk = SelectedValues<BooksTable>["id"]

export class BooksCrudRepo {
    constructor(
        public getConnection: () => DBConnection,
        public table: BooksTable,
    ) {}

    tableCols = extractColumnsFrom(this.table)

    findOneById(id: BooksTablePk, conn = this.getConnection()) {
        return conn.selectFrom(this.table)
            .where(this.table.id.equals(id))
            .select(this.tableCols)
            .executeSelectNoneOrOne();
    }
    findManyById(idList: BooksTablePk[], conn = this.getConnection()) {
        return conn.selectFrom(this.table)
            .where(this.table.id.in(idList))
            .select(this.tableCols)
            .executeSeletMany();
    }
    insertOne(row: InsertableRow<BooksTable>, conn = this.getConnection()) {
        return conn.insertInto(this.table)
            .set(row)
            .returning(this.tableCols)
            .executeInsertOne();
    }
    insertMany(rows: InsertableRow<BooksTable>[], conn = this.getConnection()) {
        return conn.insertInto(this.table)
            .values(rows)
            .returning(this.tableCols)
            .executeInsertMany();
    }
    updateOneById(id: BooksTablePk, update: UpdatableRow<BooksTable>, conn = this.getConnection()) {
        return conn.update(this.table)
            .set(update)
            .where(this.table.id.equals(id))
            .returning(this.tableCols)
            .executeUpdateOne();
    }
    updateManyById(idList: BooksTablePk[], update: UpdatableRow<BooksTable>, conn = this.getConnection()) {
        return conn.update(this.table)
            .set(update)
            .where(this.table.id.in(idList))
            .returning(this.tableCols)
            .executeUpdateMany();
    }
    deleteOneById(id: BooksTablePk, conn = this.getConnection()) {
        return conn.deleteFrom(this.table)
            .where(this.table.id.equals(id))
            .returning(this.tableCols)
            .executeDeleteOne();
    }
    deleteManyById(idList: BooksTablePk[], conn = this.getConnection()) {
        return conn.deleteFrom(this.table)
            .where(this.table.id.in(idList))
            .returning(this.tableCols)
            .executeDeleteMany();
    }
}


// ChaptersTable.ts :
/**
 * DO NOT EDIT:
 *
 * This file has been auto-generated from database schema using ts-sql-codegen.
 * Any changes will be overwritten.
 */
import { Table } from "ts-sql-query/Table";
import type { DBConnection } from "../helpers/connection-source";
import {
    extractColumnsFrom,
} from "ts-sql-query/extras/utils"
import {
    ChapterMetadataAdapter,
} from "../helpers/adapters"
import {
    ChapterMetadata,
} from "../helpers/types"

/**
 * Chapters information is only available for books with parseable metadata; Consumers should not assume completeness.
*/
export class ChaptersTable extends Table<DBConnection, 'ChaptersTable'> {
    id = this.autogeneratedPrimaryKey('id', 'int');
    name = this.column('name', 'string');
    bookId = this.column('book_id', 'uuid');
    metadata = this.optionalColumn<ChapterMetadata>('metadata', 'custom', 'jsonb', ChapterMetadataAdapter);
    title = this.optionalColumn('title', 'string');
    description = this.optionalColumn('description', 'string');

    constructor() {
        super('chapters')
    }
}


export type ChaptersTablePk = SelectedValues<ChaptersTable>["id"]

export class ChaptersCrudRepo {
    constructor(
        public getConnection: () => DBConnection,
        public table: ChaptersTable,
    ) {}

    tableCols = extractColumnsFrom(this.table)

    findOneById(id: ChaptersTablePk, conn = this.getConnection()) {
        return conn.selectFrom(this.table)
            .where(this.table.id.equals(id))
            .select(this.tableCols)
            .executeSelectNoneOrOne();
    }
    findManyById(idList: ChaptersTablePk[], conn = this.getConnection()) {
        return conn.selectFrom(this.table)
            .where(this.table.id.in(idList))
            .select(this.tableCols)
            .executeSeletMany();
    }
    insertOne(row: InsertableRow<ChaptersTable>, conn = this.getConnection()) {
        return conn.insertInto(this.table)
            .set(row)
            .returning(this.tableCols)
            .executeInsertOne();
    }
    insertMany(rows: InsertableRow<ChaptersTable>[], conn = this.getConnection()) {
        return conn.insertInto(this.table)
            .values(rows)
            .returning(this.tableCols)
            .executeInsertMany();
    }
    updateOneById(id: ChaptersTablePk, update: UpdatableRow<ChaptersTable>, conn = this.getConnection()) {
        return conn.update(this.table)
            .set(update)
            .where(this.table.id.equals(id))
            .returning(this.tableCols)
            .executeUpdateOne();
    }
    updateManyById(idList: ChaptersTablePk[], update: UpdatableRow<ChaptersTable>, conn = this.getConnection()) {
        return conn.update(this.table)
            .set(update)
            .where(this.table.id.in(idList))
            .returning(this.tableCols)
            .executeUpdateMany();
    }
    deleteOneById(id: ChaptersTablePk, conn = this.getConnection()) {
        return conn.deleteFrom(this.table)
            .where(this.table.id.equals(id))
            .returning(this.tableCols)
            .executeDeleteOne();
    }
    deleteManyById(idList: ChaptersTablePk[], conn = this.getConnection()) {
        return conn.deleteFrom(this.table)
            .where(this.table.id.in(idList))
            .returning(this.tableCols)
            .executeDeleteMany();
    }
}
