import * as z from "zod";
import { FieldMappingSchema, StrOrRegExpSchema } from "./field-mappings";

export const GeneratorOptsSchema = z.object({
    /** Simulate the generation and print the outcome without actually modifying any files */
    dryRun: z.boolean().nullish(),

    /** Path to yaml schema dumped by tbls */
    schemaPath: z
        .string()
        .nullish()
        .transform((it) => it ?? "schema.yaml"),

    /** Path to module that exports DBConnection object used in table mappers */
    connectionSourcePath: z
        .string()
        .nullish()
        .transform((it) => it ?? "src/db/connection-source.ts"),

    /** Path to output directory where a typescript class file will be generated for each table */
    outputDirPath: z
        .string()
        .nullish()
        .transform((it) => it ?? "src/generated"),

    /**
     * Customize how table columns are mapped to typescript fields
     *
     * Refer {@link FieldMapping}
     */
    fieldMappings: FieldMappingSchema.array().nullish(),

    /**
     * Restrict the generator to process only a subset of tables
     * available
     */
    tables: z
        .object({
            /**
             * Tables to be included - identified by qualified table name
             * or regular expression
             */
            include: StrOrRegExpSchema.array().nullish(),
            /**
             * Tables to be excluded - identified by qualified table name
             * or regular expression
             */
            exclude: StrOrRegExpSchema.array().nullish(),
        })
        .nullish(),

    export: z
        .object({
            tableInstances: z.boolean().default(false),
            tableClasses: z.boolean().default(true)
        })
        .nullish(),

    /**
     * Convenience utility for common cases where all tables
     * follow same conventions
     */
    common: z
        .object({
            typeAdapter: z.object({
                /**
                 * Common import path to be used for type adapters
                 * when no specific import path is specified at field level
                 */
                importPath: z.string(),
            }),
            /**
             * Useful when tbls is not able to detect primary key
             * but all the tables share primary key columns with
             * same characteristics
             */
            primaryKey: z
                .object({
                    /** Name of primary key column */
                    name: z.string().nullish(),
                    /** If primary key column is auto-generated */
                    isAutoGenerated: z.boolean().nullish(),
                })
                .nullish(),
        })
        .nullish(),
});

/**
 * Generator options
 */
export interface GeneratorOpts extends z.TypeOf<typeof GeneratorOptsSchema> {}
