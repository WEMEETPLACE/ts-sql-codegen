import * as z from "zod";
import { FieldMappingSchema, StrOrRegExpSchema } from "./field-mappings";

export const TableInclusionSchema = z.object({
    /**
     * Tables to be included - identified by qualified table name
     * or regular expression
     */
    include: StrOrRegExpSchema.array().nullish(),
    /**
     * Tables to be excluded - identified by qualified table name
     * or regular expression
     */
    exclude: StrOrRegExpSchema.array().nullish(),
});

export interface TableInclusion extends z.TypeOf<typeof TableInclusionSchema> {}

export const ExportOptionsSchema = z.object({
    tableInstances: z.boolean().default(false),
    tableClasses: z.boolean().default(true),
});

export interface ExportOptions extends z.TypeOf<typeof ExportOptionsSchema> {}

export const CommonTypeAdapterOptionsSchema = z.object({
    /**
     * Common import path to be used for type adapters
     * when no specific import path is specified at field level
     */
    importPath: z.string(),
});

export interface CommonTypeAdapterOptions
    extends z.TypeOf<typeof CommonTypeAdapterOptionsSchema> {}

export const CommonPrimaryKeyOptionsSchema = z.object({
    /** Name of primary key column */
    name: z.string().nullish(),
    /** If primary key column is auto-generated */
    isAutoGenerated: z.boolean().nullish(),
});

export interface CommonPrimaryKeyOptions
    extends z.TypeOf<typeof CommonPrimaryKeyOptionsSchema> {}

export const CommonCustomTypesOptionsSchema = z.object({
    importPath: z.string(),
});

export interface CommonCustomTypesOptions
    extends z.TypeOf<typeof CommonCustomTypesOptionsSchema> {}

export const CommonOptionsSchema = z.object({
    /** @see {@link CommonCustomTypesOptions} */
    customTypes: CommonCustomTypesOptionsSchema.nullish(),

    /** @see {@link CommonPrimaryKeyOptions} */
    typeAdapter: CommonTypeAdapterOptionsSchema.nullish(),

    /** @see {@link CommonCustomTypesOptions} */
    primaryKey: CommonPrimaryKeyOptionsSchema.nullish(),
});

export interface CommonOptions extends z.TypeOf<typeof CommonOptionsSchema> {}

export const GeneratorOptsSchema = z.object({
    /** Simulate the generation and print the outcome without actually modifying any files */
    dryRun: z.boolean().nullish(),

    /** Path to yaml schema dumped by tbls */
    schemaPath: z
        .string()
        .nullish()
        .transform((it) => it ?? "schema.yaml"),

    /** Path to module that exports DBConnection object used in table mappers */
    connectionSourcePath: z
        .string()
        .nullish()
        .transform((it) => it ?? "src/db/connection-source.ts"),

    /** Path to output directory where a typescript class file will be generated for each table */
    outputDirPath: z
        .string()
        .nullish()
        .transform((it) => it ?? "src/generated"),

    /**
     * Customize how table columns are mapped to typescript fields
     *
     * Refer {@link FieldMapping}
     */
    fieldMappings: FieldMappingSchema.array().nullish(),

    /**
     * Restrict the generator to process only a subset of tables
     * available
     *
     * See {@link TableInclusion}
     */
    tables: TableInclusionSchema.nullish(),

    /**
     * Customize what all entities are exported from generated file
     *
     * See {@link ExportOptions}
     */
    export: ExportOptionsSchema.nullish(),

    /**
     * Convenience utility for common cases where all tables
     * follow same conventions
     *
     * See {@link CommonOptions}
     */
    common: CommonOptionsSchema.nullish(),
});

/**
 * Generator options
 */
export interface GeneratorOpts extends z.TypeOf<typeof GeneratorOptsSchema> {}
